blueprint:
  name: SirYasko's LXEK-5/ZBEK-26 v1.3
  description: >
    Control entities via an Adeo LXEK-5/ZBEK-26 (Leroy Merlin - Lexman) remote connected trough ZHA 
    (HR-C99C-Z-C045 - https://zigbee.blakadder.com/ADEO_HR-C99C-Z-C045.html)
  source_url: https://github.com/SirYasko/HA-Blueprints/blob/main/zha-adeo-lxek5-zbek26-lights.yaml
  domain: automation
  author: SirYasko
        
  input:
    i__remote:
      name: (Required) Adeo LXEK-5/ZBEK-26 remote controler
      description: Select the remote controler you wish to use.
      selector:
        device:
          filter:
            - integration: zha
              model: LXEK-5
            - integration: zha
              model: ZBEK-26

    i__entities:
      name: (Required) Available entities - lights / switches / fans
      description: Select the entity you wish to control (max 4 entities or groups). The order of entities correspond to the scene buttons.
      selector:
        entity:
          domain:
            - light
            - switch
            - fan
          multiple: true
      
    i__entity_helper:
      name: (Required) Helper
      description: "Select the helper to store selected entity: Settings -> Devices & Services -> Helpers -> Add helper -> Text (name: any, icon: any, min length: 0, max length: 1000, mode: text, pattern regex: empty)."
      selector:
        entity:
          domain:
            - input_text
          multiple: false
    
    i__entity_type_1:
      name: "(Required) Type of entity #1"
      description: "Choose the type of selected entity #1"
      selector:
        select:
          mode: dropdown 
          options: 
            - label: Skip entity
              value: SKIP
            - label: White light with adjustable temperature and brightness
              value: LIGHT_WHITE
            - label: Color light with adjustable hue and saturation
              value: LIGHT_COLOR
            - label: Light On/Off
              value: LIGHT_ONOFF
            - label: Switch On/Off
              value: SWITCH_ONOFF
            - label: Fan
              value: FAN
      default: SKIP
 
    i__entity_type_2:
      name: "(Required) Type of entity #2"
      description: "Choose the type of selected entity #2"
      selector:
        select:
          mode: dropdown 
          options: 
            - label: Skip entity
              value: SKIP
            - label: White light with adjustable temperature and brightness
              value: LIGHT_WHITE
            - label: Color light with adjustable hue and saturation
              value: LIGHT_COLOR
            - label: Light On/Off
              value: LIGHT_ONOFF
            - label: Switch On/Off
              value: SWITCH_ONOFF
            - label: Fan
              value: FAN
      default: SKIP

    i__entity_type_3:
      name: "(Required) Type of entity #3"
      description: "Choose the type of selected entity #3"
      selector:
        select:
          mode: dropdown 
          options: 
            - label: Skip entity
              value: SKIP
            - label: White light with adjustable temperature and brightness
              value: LIGHT_WHITE
            - label: Color light with adjustable hue and saturation
              value: LIGHT_COLOR
            - label: Light On/Off
              value: LIGHT_ONOFF
            - label: Switch On/Off
              value: SWITCH_ONOFF
            - label: Fan
              value: FAN
      default: SKIP

    i__entity_type_4:
      name: "(Required) Type of entity #4"
      description: "Choose the type of selected entity #4"
      selector:
        select:
          mode: dropdown 
          options:
            - label: Skip entity
              value: SKIP
            - label: White light with adjustable temperature and brightness
              value: LIGHT_WHITE
            - label: Color light with adjustable hue and saturation
              value: LIGHT_COLOR
            - label: Light On/Off
              value: LIGHT_ONOFF
            - label: Switch On/Off
              value: SWITCH_ONOFF
            - label: Fan
              value: FAN
      default: SKIP
    
    i__brightness_desc:
      name: " "
      description: "# Brightness"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 
        
    i__brightness_step:
      name: (Optional) Brightness step
      description: Brightness change step.
      default: 35
      selector:
        number:
          min: 1
          max: 255
          step: 1 
          
    i__brightness_min:
      name: (Optional) Minimum brightness value
      description: Number indicating minimum brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.
      default: 5
      selector:
        number:
          min: 0
          max: 255
          step: 1 

    i__brightness_max:
      name: (Optional) Maximum brightness value
      description: Number indicating maximum brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1 

    i__brightness_double_on:
      name: (Optional) Set maximum brightness on double on.
      description: Set the brightness (maximum brightness value) when the light is already turned on and turned on again.
      default: true
      selector:
        boolean:

    i__brightness_double_off:
      name: (Optional) Set minimum brightness on double off.
      description: Set the brightness (minimum brightness value) when the light is already turned off and turned off on again.
      default: true
      selector:
        boolean:
        
    i__brightness_transition_time:
      name: (Optional) Brightness transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"
 
    i__brightness_force:
      name: (Optional) Force brightness value at turn on
      description: Force brightness value when the light is being turned on.
      default: false
      selector:
        boolean:
        
    i__brightness_force_value:
      name: (Optional) Force brightness value
      description: Brightness value to force when turning on the light.
      default: 5
      selector:
        number:
          min: 0
          max: 255
          step: 1
          mode: slider
        
    i__color_desc:
      name: " "
      description: "# Color temperature"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 
    
    i__color_force:
      name: (Optional) Force color temperature value at turn on
      description: Force color temperature value when the light is being turned on.
      default: false
      selector:
        boolean:
        
    i__color_force_value:
      name: (Optional) Force color temperature value at turn on
      description: Color temperature when turning on the light in mireds.
      default: 326
      selector:
        color_temp:
          min: 153
          max: 500
          unit: "mired"
          
    i__color_step:
      name: (Optional) Color temperature step
      description: Color temperature change step in mireds.
      default: 25
      selector:
        number:
          min: 1
          max: 347
          unit_of_measurement: "mireds"
         
    i__color_transition_time:
      name: (Optional) Color transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"

    i__hs_desc:
      name: " "
      description: "# Hue & Saturation"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 

    i__hue_transition_time:
      name: (Optional) Hue transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"
 
    i__saturation_transition_time:
      name: (Optional) Saturation transition time
      description: Duration it takes to get to next state.
      default: 0.5
      selector:
        number:
          min: 0
          max: 60
          step: 0.1          
          unit_of_measurement: "seconds"

    # FAN
    i__fan_desc:
      name: " "
      description: "# Fan"
      default: ""
      selector:
        qr_code:
          data: ""
          scale: 0
          error_correction_level: low 
    
    i__fan_speed_min:
      name: (Optional) Minimum fan speed value
      description: Number indicating minimum fan speed, where 0 turns the fan off, 1 is the minimum speed, and 100 is the maximum speed.
      default: 0
      selector:
        number:
          min: 0
          max: 100
          step: 1 

    i__fan_speed_max:
      name: (Optional) Maximum fan speed value
      description: Number indicating maximum fan speed, where 0 turns the fan off, 1 is the minimum speed, and 100 is the maximum speed.
      default: 100
      selector:
        number:
          min: 0
          max: 100
          step: 1 
          
    i__fan_speed_increase_step:
      name: (Optional) Increasing fan speed by a percentage step
      description: Increase speed by a percentage.
      default: 20
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "Percent"   

    i__fan_speed_descrease_step:
      name: (Optional) Decreasing fan speed by a percentage step
      description: Increase speed by a percentage.
      default: 20
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "Percent"   

mode: restart
max_exceeded: silent
    
variables:
  v__entities:                   !input i__entities
  v__entity_helper:              !input i__entity_helper 
  v__entity_type_1:              !input i__entity_type_1  
  v__entity_type_2:              !input i__entity_type_2
  v__entity_type_3:              !input i__entity_type_3 
  v__entity_type_4:              !input i__entity_type_4 
  # LIGHT BRIGHTNESS
  v__brightness_step:            !input i__brightness_step
  v__brightness_min:             !input i__brightness_min
  v__brightness_max:             !input i__brightness_max
  v__brightness_double_on:       !input i__brightness_double_on
  v__brightness_double_off:      !input i__brightness_double_off
  v__brightness_transition_time: !input i__brightness_transition_time
  v__brightness_force:           !input i__brightness_force
  v__brightness_force_value:     !input i__brightness_force_value
  # LIGHT COLOR TEMPERATURE
  v__color_force:                !input i__color_force
  v__color_force_value:          !input i__color_force_value
  v__color_step:                 !input i__color_step
  v__color_transition_time:      !input i__color_transition_time
  # HS
  v__hue_transition_time:        !input i__hue_transition_time
  v__saturation_transition_time: !input i__saturation_transition_time
  # FAN
  v__fan_speed_min:              !input i__fan_speed_min
  v__fan_speed_max:              !input i__fan_speed_max
  v__fan_speed_increase_step:    !input i__fan_speed_increase_step
  v__fan_speed_descrease_step:   !input i__fan_speed_descrease_step
  
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input i__remote
    
action:
- variables:
    v__command:       '{{ trigger.event.data.command }}'
    v__command_args0: '{{ trigger.event.data.args[0] }}'
    v__command_args1: '{{ trigger.event.data.args[1] }}'
    v__entity:        '{{ (states(v__entity_helper) | from_json).entity }}'
- choose:
  - conditions:
    - condition: template
      value_template: '{{ 0 == 1 }}' 
    sequence:
      - service: persistent_notification.create
        data:
          title: 'Parameters'
          message: >
           v__entity: {{v__entity}}; 
           v__entity_type: {{v__entity_type}}; 
           v__command: {{v__command}}; 
           v__command_args0: {{v__command_args0}}; 
           v__command_args1: {{v__command_args1}};  
          
  - conditions:
    - condition: template
      value_template: '{{ v__entities | length > 4 }}' 
    sequence:
      - service: persistent_notification.create
        data:
          title: 'Too many entities added'
          message: 'Please select up to 4 entities only.'

#ON button
  - conditions:
    - condition: template
      value_template: '{{ v__command == "on" and v__entity_type.startswith("LIGHT_") }}'
    sequence:
    - variables:
        v__current_brightness: '{{ (state_attr(v__entity, "brightness") or 0 ) | int }}'
        v__brightness: '{% if v__brightness_force and v__current_brightness == 0  %} {{ v__brightness_force_value | int }} {% elif v__brightness_double_on and v__current_brightness > 0%} {{ v__brightness_max | int }} {% else %} none {% endif %}'
        v__transition: '{% if v__brightness_transition_time %} {{ v__brightness_transition_time }} {% else %} none {% endif %}' 
        v__color_temp: '{% if v__color_force %} {{ v__color_force_value | int }} {% else %} none {% endif %}'
        v__data: >
          {
          {% if v__brightness | is_number %}
          "brightness": "{{ v__brightness }}",
          {% endif %}
          {% if v__color_temp | is_number %}
          "color_temp": "{{ v__color_temp }}",
          {% endif %}
          {% if v__transition | is_number %}
          "transition": "{{ v__transition }}",
          {% endif %}
          }
    - service: light.turn_on
      target:
       entity_id: '{{ v__entity }}'
      data: '{{ v__data }}'

  - conditions:
    - condition: template
      value_template: '{{ v__command == "on" and v__entity_type.startswith("SWITCH") }}'
    sequence:
    - service: switch.turn_on
      target:
       entity_id: '{{ v__entity }}'
       
  - conditions:
    - condition: template
      value_template: '{{ v__command == "on" and v__entity_type.startswith("FAN") }}'
    sequence:
    - service: fan.turn_on
      target:
        entity_id: '{{ v__entity }}'
  
#OFF button 
  - conditions:
    - condition: template
      value_template: '{{ v__command == "off" and v__entity_type == "LIGHT_ONOFF" }}'
    sequence:
    - service: light.turn_off
      target:
        entity_id: '{{ v__entity }}'
 
  - conditions:
    - condition: template
      value_template: '{{ v__command == "off" and v__entity_type.startswith("SWITCH") }}'
    sequence:
    - service: switch.turn_off
      target:
        entity_id: '{{ v__entity }}'
 
  - conditions:
    - condition: template
      value_template: '{{ v__command == "off" and v__entity_type.startswith("FAN") }}'
    sequence:
    - service: fan.turn_off
      target:
        entity_id: '{{ v__entity }}'
        
  - conditions:
    - condition: template
      value_template: '{{ v__command == "off" and v__entity_type in ("LIGHT_WHITE", "LIGHT_COLOR") and (state_attr(v__entity, "brightness") or 0 ) | int > 0 }}'
    sequence:
    - service: light.turn_off
      target:
        entity_id: '{{ v__entity }}'

  - conditions:
    - condition: template
      value_template: '{{ v__command == "off" and v__entity_type in ("LIGHT_WHITE", "LIGHT_COLOR") and (state_attr(v__entity, "brightness") or 0 ) | int == 0 }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        brightness: '{{ v__brightness_min }}'
        
#UP/DOWN buttons
  # light brightness       
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_WHITE", "LIGHT_COLOR") }}'
    sequence:
    - variables:
        v__current_brightness: '{{ (state_attr(v__entity, "brightness")) | int }}'       
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        brightness: >
          {% if v__current_brightness + v__brightness_step >= v__brightness_max %}
          {{ v__brightness_max }}
          {% else %}
          {{ v__current_brightness + v__brightness_step }}
          {% endif %}
        transition: '{{ v__brightness_transition_time }}'
            
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_WHITE", "LIGHT_COLOR") }}'
    sequence:
    - variables:
        v__current_brightness: '{{ (state_attr(v__entity, "brightness")) | int }}'    
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        brightness: >
          {% if v__current_brightness <= v__brightness_step %}
          {{ v__brightness_min }}
          {% else %}
          {{ v__current_brightness | int - v__brightness_step }}
          {% endif %}
        transition: '{{ v__brightness_transition_time }}'
  
  # fan speed
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Up" and v__entity_type in ("FAN") }}' 
    sequence:
    - variables:
        v__current_fan_speed: '{{ (state_attr(v__entity, "percentage")) | int }}'
    - service: fan.set_percentage
      target:
        entity_id: '{{ v__entity }}' 
      data:
        percentage: >
          {% if v__current_fan_speed + v__fan_speed_increase_step >= v__fan_speed_max %}
          {{ v__fan_speed_max }}
          {% else %}
          {{ v__current_fan_speed + v__fan_speed_increase_step }}
          {% endif %}

  - conditions:
    - condition: template
      value_template: '{{ v__command == "step" and v__command_args0 == "StepMode.Down" and v__entity_type in ("FAN") }}'
    sequence:
    - variables:
        v__current_fan_speed: '{{ (state_attr(v__entity, "percentage")) | int }}'
    - service: fan.set_percentage
      target:
        entity_id: '{{ v__entity }}' 
      data:
        percentage: >
          {% if v__current_fan_speed - v__fan_speed_descrease_step <= v__fan_speed_min %}
          {{ v__fan_speed_min }}
          {% else %} 
          {{ v__current_fan_speed - v__fan_speed_descrease_step }}
          {% endif %}

#TOP/BOTTOM/LEFT/RIGHT buttons
  # color temperature up / down buttons
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_WHITE", "LIGHT_COLOR") }}'
    sequence:
    - variables:
        v__current_color_temp: '{{ (state_attr(v__entity, "color_temp")) | int }}'
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        color_temp: >
          {% if v__current_color_temp + v__color_step > 500 %}
          {{ 500 }}
          {% else %}
          {{ v__current_color_temp + v__color_step }}
          {% endif %}
        transition: '{{ v__color_transition_time }}'
        
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_WHITE", "LIGHT_COLOR") }}'
    sequence:
    - variables:
        v__current_color_temp: '{{ (state_attr(v__entity, "color_temp")) | int }}'    
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        color_temp: >
          {% if v__current_color_temp - v__color_step < 153 %}
          {{ 153 }}
          {% else %}
          {{ v__current_color_temp - v__color_step }}
          {% endif %}
        transition: '{{ v__color_transition_time }}'
 
  # fan mode up / down buttons
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Up" and v__entity_type in ("FAN") }}'
    sequence:
    - variables:
        v__current_fan_mode: '{{ state_attr(v__entity, "preset_mode") }}'
    - service: fan.set_preset_mode
      target:
        entity_id: '{{ v__entity }}'
      data:
        preset_mode: >
          {% set modes = state_attr(v__entity, 'preset_modes') %}
          {% set current_index = modes.index(v__current_fan_mode) %}
          {% set next_index = (current_index + 1) % modes | length %}
          {{ modes[next_index] }}

  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_color_temp" and v__command_args0 == "StepMode.Down" and v__entity_type in ("FAN") }}'
    sequence:
    - variables:
        v__current_fan_mode: '{{ state_attr(v__entity, "preset_mode") }}'
    - service: fan.set_preset_mode
      target:
        entity_id: '{{ v__entity }}'
      data:
        preset_mode: >
          {% set modes = state_attr(v__entity, 'preset_modes') %}
          {% set current_index = modes.index(v__current_fan_mode) %}
          {% set prev_index = (current_index - 1) % modes | length %}
          {{ modes[prev_index] }}
                
  # color saturation up / down buttons (green led)
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_saturation" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_COLOR") }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        #hs_color:
        transition: '{{ v__saturation_transition_time }}'
        
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_saturation" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_COLOR") }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        #hs_color:
        transition: '{{ v__saturation_transition_time }}'

  # color hue right /left buttons (green led)
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_hue" and v__command_args0 == "StepMode.Down" and v__entity_type in ("LIGHT_COLOR") }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        #hs_color:
        transition: '{{ v__hue_transition_time }}'
        
  - conditions:
    - condition: template
      value_template: '{{ v__command == "step_hue" and v__command_args0 == "StepMode.Up" and v__entity_type in ("LIGHT_COLOR") }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ v__entity }}'
      data:
        #hs_color:
        transition: '{{ v__hue_transition_time }}'
        
#SCENE1/SCENE2/SCENE3/SCENE4 buttons
  - conditions:
    - condition: template
      value_template: '{{ v__command == "view" and v__command_args1 == 10 and v__entities[0] | length > 0 and v__entity_type_1 != "SKIP" }}'
    sequence:
      - service: input_text.set_value
        data:
          entity_id: '{{ v__entity_helper }}'
          value: '{{ {"entity": v__entities[0], "type": v__entity_type_1} | tojson }}'
 
  - conditions:
    - condition: template
      value_template: '{{ v__command == "view" and v__command_args1 == 11 and v__entities[1] | length > 0 and v__entity_type_2 != "SKIP" }}'
    sequence:
      - service: input_text.set_value
        data:
          entity_id: '{{ v__entity_helper }}'
          value: '{{ {"entity": v__entities[1], "type": v__entity_type_2} | tojson }}'
 
  - conditions:
    - condition: template
      value_template: '{{ v__command == "view" and v__command_args1 == 12 and v__entities[2] | length > 0 and v__entity_type_3 != "SKIP" }}'
    sequence:
      - service: input_text.set_value
        data:
          entity_id: '{{ v__entity_helper }}'
          value: '{{ {"entity": v__entities[2], "type": v__entity_type_3} | tojson }}'
 
  - conditions:
    - condition: template
      value_template: '{{ v__command == "view" and v__command_args1 == 13 and v__entities[3] | length > 0 and v__entity_type_4 != "SKIP" }}'
    sequence:
      - service: input_text.set_value
        data:
          entity_id: '{{ v__entity_helper }}'
          value: '{{ {"entity": v__entities[3], "type": v__entity_type_4} | tojson }}'
          
  # - conditions:
    # - condition: template
      # value_template: '{{ v__command == "view" and v__command_args1 == 14 }}'
    # sequence:
      # - service: persistent_notification.create
        # data:
          # title: Current entity
          # message: Current entity '{{ v__entity }}'
            
  default: []

